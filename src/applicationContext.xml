<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 配置自动扫描组件  -->
    <context:component-scan base-package="com.sunyanxiong"></context:component-scan>

    <!-- 让 spring IoC 容器管理 hibernate 的SessionFactory -->
    <!-- 1.导入数据源信息 -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <!-- 2.配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>

        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
    </bean>
    <!-- 3.创建 SessionFactory 实例Bean -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>

        <!-- 配置hibernate 的一些基本信息 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>

                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!-- 配置加载hibernate 映射文件 -->
        <property name="mappingLocations">
            <list>
                <value>classpath:com/sunyanxiong/entity/*.hbm.xml</value>
                <value>classpath:com/sunyanxiong/nsfw/*/entity/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <!-- 配置 spring 声明式事务 -->
    <!-- 1.配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- 2.配置事务属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*" rollback-for="Throwable"/>
        </tx:attributes>
    </tx:advice>
    <!-- 3.配置 切入点，并将事务属性和连接点相互关联 -->
    <aop:config>
        <!--<aop:pointcut id="serviceOperation" expression="bean(*Service)"/>--><!-- 扫描以Service结尾的bean -->
        <aop:pointcut id="serviceOperation" expression="execution(* com.sunyanxiong.nsfw.user.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>


    <!-- 定义模版 baseDao，用于生成 SessionFactory -->
    <bean id="baseDao" abstract="true">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 引用外部 spring 配置文件 -->
    <import resource="classpath:com/sunyanxiong/nsfw/*/config/*-spring.xml"></import>








    <bean id="person" class="com.sunyanxiong.entity.Person">
        <property name="name" value="name"></property>
    </bean>

    <bean id="personDao" class="com.sunyanxiong.dao.PersonDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <bean id="personService" class="com.sunyanxiong.service.impl.PersonServiceImpl">
        <property name="personDao" ref="personDao"></property>
    </bean>

    <!-- struts2 属性是单例模式，每次请求都会创建新的对象，故scope="prototype" -->
    <bean id="personAction" class="com.sunyanxiong.action.PersonAction" scope="prototype">
        <property name="personService" ref="personService"></property>
    </bean>

</beans>